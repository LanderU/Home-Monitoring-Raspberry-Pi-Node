{"name":"Home-monitoring-raspberry-pi-node","tagline":"DIY Home Monitoring & Intruder Alert system","body":"# Home Monitoring with Raspberry Pi and Node.js\r\n \r\n![Alt text](https://github.com/orosandrei/Home-Monitoring-Raspberry-Pi-Node/raw/master/screenshots/system.jpg?raw=true \"Home Monitoring with Raspberry Pi and Node.js\")\r\n \r\n## Description  \r\n \r\nThe project is designed as a end to end solution for a DIY Home Monitoring & Intruder Alert system. Besides offering a live video stream on any device (web responsive client), it also actively monitors for movement with the help of a PIR sensor.   \r\n \r\nIf an Alarm is triggered, you get a SMS notification on your phone and the snapshots taken during the Alarm time span (customizable - default is 10 minutes) are uploaded via FTP to your server.  \r\n \r\nActivation / Deactivation of the Alarm Mode can be done in 2 ways:  \r\n 1. from the Web Client user interface \r\n 2. with a Button - for convenience reasons: it is faster than connecting from your phone / pc & toggling the Alert Mode checkbox \r\n    - you simply toggle the Alert mode with the press of a button  \r\n    - there is a 10 seconds customizable delay which allows you to move out of the PIR sensor range \r\n    - a Led indicates the Alarm Mode enabled/disabled status \r\n \r\nIn order to avoid false positives from the PIR motion sensor, extra checks were added - a detection counter & detection interval - in order for the Alarm to get triggered, the sensor needs to detect movement 3 times in 5 seconds (both values configurable in code). \r\n \r\n \r\n## Source Code \r\n \r\nThe source code is open source (MIT License)\r\n \r\n## Technology \r\n \r\nThe project was developed using: \r\n- [Raspberry Pi](http://raspberrypi.org) - [raspbian](https://www.raspbian.org/), brick button & led, Pir sensor\r\n- [Node.js](https://nodejs.org/en/) - for the main application \r\n- [Mjpg_streamer](http://sourceforge.net/projects/mjpg-streamer/) - to generate the video stream \r\n- Shell scripting - for easy application start (interactive & background) \r\n- Htms/Css/Javascript + [Bootstrap](http://getbootstrap.com/) - the web client  \r\n \r\n## Project components \r\n \r\n### Hardware \r\n![Alt text](https://github.com/orosandrei/Home-Monitoring-Raspberry-Pi-Node/raw/master/screenshots/diagram.PNG?raw=true \"Pir Button Led RaspberryPi Gpio\")\r\n```javascript\r\nthis.Gpio = require('pi-gpio');\r\nthis.Hardware = { MotionSensor : 8, Led : 26, Button : 12 };\r\n```\r\n- Raspberry Pi \r\n  - I used *Model B Revision 2* with *Raspbian* - any model should be ok, just be careful with the Gpio configuration pin mappings, they can differ \r\n  - Generic USB webcam (compatible with Raspberry Pi & Raspbian) \r\n  - You can find a comprehensive list here http://elinux.org/RPi_USB_Webcams  \r\n  - I used a very old 2MP one which seems to work out of the box with the generic drivers \r\n- Led & Button  \r\n![Alt text](https://github.com/orosandrei/Home-Monitoring-Raspberry-Pi-Node/raw/master/screenshots/button-led-brick.png?raw=true \"Brick Button Led\")\r\n- PIR motion sensor \r\n\r\n![Alt text](https://github.com/orosandrei/Home-Monitoring-Raspberry-Pi-Node/raw/master/screenshots/pir.jpg?raw=true \"PIR sensor\")\r\n  - The one I used is available here https://www.sparkfun.com/products/13285  \r\n  - It normally connects to Analog Input (ex. on Arduino); however you can use it with Digital as well if you connect a 10K resistor between VCC & Signal  \r\n![Alt text](https://github.com/orosandrei/Home-Monitoring-Raspberry-Pi-Node/raw/master/screenshots/pir-10k-resistor.jpg?raw=true \"PIR resistor\") \r\n  - To make things easier you can purchase this sensor https://www.adafruit.com/products/189 and skip the soldering part (+ this one has configurable sensitivity built-in, so you might be able to skip the one implemented in the code)    \r\n \r\n### Node application \r\n \r\n#### Dependencies \r\n- express: ^4.12.3 \r\n- ftp: ^0.3.10 \r\n- http-auth: ^2.2.8 \r\n- ini: ^1.3.4 \r\n- pi-gpio: 0.0.7 \r\n- socket.io: ^1.3.5 \r\n- twilio: ^2.3.0 \r\n \r\nThe dependencies you install with NPM: \r\n```\r\nnpm install module --save\r\n```\r\n \r\n#### Generic ```Application.js```\r\nIt is the basic application object, defined to be reusable in other projects \r\nContains the basic server code, generic config file read/write operations, generic Init & Execute & Exit methods implementations \r\n \r\n#### Home Monitoring ```ApplicationHM.js``` \r\n- config.ini file \r\n  - default video quality & alert mode settings\r\n  - Twilio sms Api Sid, Token, To number, From number \r\n  - Ftp settings\r\n- Authentication (digest http authentication) - defaults are **admin** & **password** :) \r\n  - You can change them from the ```htdigest``` file (nice helper tool here http://websistent.com/tools/htdigest-generator-tool/ ) \r\n  ```\r\n  admin:Private:6982db7f1ddc36a0b47b5f8427dc3526\r\n  ```\r\n\r\n- Web Client application\r\n  - Accessible from anywhere via [port forwarding](https://en.wikipedia.org/wiki/Port_forwarding)\r\n  - Available also on mobile (responsive web client) \r\n- Monitoring - gets video from [Mjpg_streamer](http://sourceforge.net/projects/mjpg-streamer/) server and sends it to the connected app clients \r\n- [Mjpg_streamer](http://sourceforge.net/projects/mjpg-streamer/) was used as server, but if you prefer another tool like ffmpeg, you can easily replace it because of the loose integration via the ```start-webcam.sh``` script \r\n\r\n#### Alarm mode \r\n- Monitoring - via PIR sensor \r\n- Alarm - Sms notification (implemented with the help of [Twilio](https://www.twilio.com/sms)   text messaging API - very cool service, offers great Trial account for development \r\n- Alarm - Snapshots upload to server via Ftp \r\n \r\n### Web Client - responsive\r\n \r\nThe client application was designed to be accessible on all platforms (pc / tablet / mobile). \r\n![Alt text](https://github.com/orosandrei/Home-Monitoring-Raspberry-Pi-Node/raw/master/screenshots/client.PNG?raw=true \"Web Client\")  \r\n\r\n#### Video streaming quality settings \r\nBy default the 480p at 25fps is enabled (initial settings are loaded from the ```config.ini``` file) \r\n\r\nMy webcam is a low-end 5+ years old 2mp device, but for those of you with better webcams I also added 720p & 1080p \r\n\r\nVideo resolutions & fps can be configured from the ```/static/js/script.js``` file \r\n```javascript\r\n//only check quality settings\r\nif(ui.quality480p.prop('checked')) {\r\n\tappConfig.monitoring.quality = \"640x480\";\r\n\tappConfig.monitoring.fps = 25;\r\n}\r\nif(ui.quality720p.prop('checked')) { \r\n\tappConfig.monitoring.quality = \"1280x720\";\t\t\t\r\n\tappConfig.monitoring.fps = 25;\r\n}\r\nif(ui.quality1080p.prop('checked')) { \r\n\tappConfig.monitoring.quality = \"1920x1080\";\t\t\t\r\n\tappConfig.monitoring.fps = 25;\r\n}\r\n\t\r\n//send to server new config settings\r\nsocket.emit('update config quality', appConfig);\r\n```\r\n \r\n#### Alert Mode \r\n- initial state is loaded from the ```config.ini``` file \r\n- You can enable/disable monitoring from checkbox button in the UI \r\n- The state of the Alert Mode is shown both in the UI (the checkbox) but also by the LED \r\n- The physical Button can be also used to toggle the Alert Mode \r\n- All state changes are sent to all connected clients \r\n- If an Alarm is triggered, the UI checkbox button background will be changed to Red \r\n![Alt text](https://github.com/orosandrei/Home-Monitoring-Raspberry-Pi-Node/raw/master/screenshots/alarm.PNG?raw=true \"Alarm\")  \r\n\r\n \r\n#### Connected Clients \r\nThe dropdown shows a list of all connected clients (connection timestamp & IP) that are currently viewing the video stream  \r\n![Alt text](https://github.com/orosandrei/Home-Monitoring-Raspberry-Pi-Node/raw/master/screenshots/clients-list.PNG?raw=true \"Connected Clients List\")  \r\n\r\n \r\n### Shell Scripts \r\n \r\n**start-app.sh**\r\n- You can start the application in 2 modes: \r\n  - Interactive (for dev / testing): ```./start-app.sh```\r\n  - Background: ```./start-app.sh -background```\r\n```shell\r\n#!/bin/bash\r\n# application start in interactive or background mode\r\n#arguments:  [-background]\r\n\r\ncd /home/pi/Desktop/rpiWorkspace/Node/HomeMonitoring/\r\n\r\nif [ \"$1\" = \"-background\" ]; then\r\n\tsudo nohup node ./App-home-monitoring.js &>log.txt &\r\nelse\r\n\tsudo node ./App-home-monitoring.js \r\nfi\r\n```\r\n  \r\n**start-webcam.sh**\r\n- Used by the application to enable/disable video streaming when clients are connected or when an Alarm is triggered by the PIR sensor. \r\n```shell\r\n#!/bin/bash\r\n# webcam video stream\r\n# arguments:  [resolution] [port] [fps]\r\n\r\npkill mjpg_streamer\r\n\r\nsudo nohup ./mjpg-streamer/mjpg_streamer -i \"./mjpg-streamer/input_uvc.so -y -r $1 -f $3 -q 75\" -o \"./mjpg-streamer/output_http.so -n -p $2\" &\r\n```\r\n\r\n---\r\n \r\n**TO DO**\r\n- Some code clean-up & optimizations  \r\n- Port the application to Windows 10 Iot on Raspberry Pi 2 \r\n- Support for uploading snapshots to cloud (OneDrive / Dropbox) when an Alarm is triggered \r\n \r\n**References** \r\n- Raspberry Pi https://www.raspberrypi.org/  \r\n- Node - https://nodejs.org/en/  \r\n- Mjpg_streamer http://sourceforge.net/projects/mjpg-streamer/  \r\n- SMS Api - Twilio - https://www.twilio.com/sms  \r\n- Bootstrap http://getbootstrap.com/ \r\n- App Webcam Icon - https://www.iconfinder.com/icons/71274/webcam_icon#size=128  \r\n\r\n\r\n---\r\n**Links**\r\n- [Hackster.io project](https://www.hackster.io/andreioros) \r\n- twitter [@orosandrei](https://twitter.com/orosandrei)\r\n","google":"UA-61892-27","note":"Don't delete this file! It's used internally to help with page regeneration."}